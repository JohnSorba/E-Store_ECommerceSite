{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\ecommerce\\\\src\\\\components\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create a context for user-specific data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\n// Context provider component\nexport function UserProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Simulate fetching user data from an API\n  useEffect(() => {\n    // Fetch user data (e.g., cart, orders, addresses) and update the state\n    const fetchedUserData = fetchUserDataFromAPI();\n    setUser(fetchedUserData);\n  }, []);\n\n  // Update user data in context\n  const updateUser = newUserData => {\n    setUser(newUserData);\n  };\n\n  // Context value includes user data and the updateUser function\n  const contextValue = {\n    user,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use user data and updateUser function\n_s(UserProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = UserProvider;\nexport function useUser() {\n  _s2();\n  return useContext(UserContext);\n}\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","fetchedUserData","fetchUserDataFromAPI","updateUser","newUserData","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/dev/ecommerce/src/components/UserContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// Create a context for user-specific data\r\nexport const UserContext = createContext();\r\n\r\n// Context provider component\r\nexport function UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Simulate fetching user data from an API\r\n  useEffect(() => {\r\n    // Fetch user data (e.g., cart, orders, addresses) and update the state\r\n    const fetchedUserData = fetchUserDataFromAPI();\r\n    setUser(fetchedUserData);\r\n  }, []);\r\n\r\n  // Update user data in context\r\n  const updateUser = (newUserData) => {\r\n    setUser(newUserData);\r\n  };\r\n\r\n  // Context value includes user data and the updateUser function\r\n  const contextValue = {\r\n    user,\r\n    updateUser,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use user data and updateUser function\r\nexport function useUser() {\r\n  return useContext(UserContext);\r\n}\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,eAAe,GAAGC,oBAAoB,CAAC,CAAC;IAC9CF,OAAO,CAACC,eAAe,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,UAAU,GAAIC,WAAW,IAAK;IAClCJ,OAAO,CAACI,WAAW,CAAC;EACtB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBN,IAAI;IACJI;EACF,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAR,QAAA,EAAEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAEhF;;AAEA;AAAAb,EAAA,CA1BgBF,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AA2B5B,OAAO,SAASiB,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOxB,UAAU,CAACK,WAAW,CAAC;AAChC;AAACmB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}